package service

import (
	"context"
	"fmt"
	"log"
	"math"
	"sort"
	"time"

	"github.com/ivanoskov/financial_bot/internal/model"
)

// ReportType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
type ReportType int

const (
	DailyReport ReportType = iota
	WeeklyReport
	MonthlyReport
	YearlyReport
)

// ExpenseTracker –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
type ExpenseTracker struct {
	repo Repository
}

// Repository –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–∞–Ω–Ω—ã—Ö
type Repository interface {
	GetTransactions(ctx context.Context, userID int64, filter model.TransactionFilter) ([]model.Transaction, error)
	GetCategories(ctx context.Context, userID int64) ([]model.Category, error)
	CreateTransaction(ctx context.Context, transaction *model.Transaction) error
	DeleteTransaction(ctx context.Context, transactionID string, userID int64) error
	CreateCategory(ctx context.Context, category *model.Category) error
	DeleteCategory(ctx context.Context, categoryID string, userID int64) error
}

// NewExpenseTracker —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ExpenseTracker
func NewExpenseTracker(repo Repository) *ExpenseTracker {
	return &ExpenseTracker{
		repo: repo,
	}
}

func (s *ExpenseTracker) AddTransaction(ctx context.Context, userID int64, categoryID string, amount float64, description string) error {
	now := time.Now()
	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è
	transactionDate := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())

	transaction := &model.Transaction{
		UserID:      userID,
		CategoryID:  categoryID,
		Amount:      amount,
		Description: description,
		Date:        transactionDate,
		CreatedAt:   now,
	}
	transaction.GenerateID()
	return s.repo.CreateTransaction(ctx, transaction)
}

func (s *ExpenseTracker) GetMonthlyReport(ctx context.Context, userID int64) (*BaseReport, error) {
	now := time.Now()
	currentStart := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, time.UTC)
	currentEnd := currentStart.AddDate(0, 1, 0).Add(-time.Second)

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
	currentTransactions, err := s.repo.GetTransactions(ctx, userID, model.TransactionFilter{
		StartDate: &currentStart,
		EndDate:   &currentEnd,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to get current month transactions: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
	prevStart := currentStart.AddDate(0, -1, 0)
	prevEnd := currentStart.Add(-time.Second)
	prevTransactions, err := s.repo.GetTransactions(ctx, userID, model.TransactionFilter{
		StartDate: &prevStart,
		EndDate:   &prevEnd,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to get previous month transactions: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–º–µ–Ω
	categories, err := s.repo.GetCategories(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get categories: %w", err)
	}
	categoryNames := make(map[string]string)
	for _, cat := range categories {
		categoryNames[cat.ID] = cat.Name
	}

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
	currentPeriod := analyzePeriod(currentTransactions, currentStart, currentEnd, categoryNames)

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
	prevPeriod := analyzePeriod(prevTransactions, prevStart, prevEnd, categoryNames)

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
	savingsRate := 0.0
	if currentPeriod.TotalIncome > 0 {
		savingsRate = (currentPeriod.TotalIncome - currentPeriod.TotalExpenses) / currentPeriod.TotalIncome
	}

	prevSavingsRate := 0.0
	if prevPeriod.TotalIncome > 0 {
		prevSavingsRate = (prevPeriod.TotalIncome - prevPeriod.TotalExpenses) / prevPeriod.TotalIncome
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã
	expenseTrend, incomeTrend := s.calculateTrends(currentTransactions)

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	monthNames := []string{
		"–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
		"–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å",
	}

	report := &BaseReport{
		Period: fmt.Sprintf("%s %d", monthNames[now.Month()-1], now.Year()),
		Text: fmt.Sprintf(
			"üí∞ –î–æ—Ö–æ–¥—ã: %.2f‚ÇΩ%s\n"+
				"üí∏ –†–∞—Å—Ö–æ–¥—ã: %.2f‚ÇΩ%s\n"+
				"üìä –ë–∞–ª–∞–Ω—Å: %.2f‚ÇΩ%s\n"+
				"üìà –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: %.2f‚ÇΩ%s\n"+
				"üìâ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ –¥–µ–Ω—å: %.2f‚ÇΩ%s\n"+
				"üíπ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π: %.1f%%%s",
			currentPeriod.TotalIncome, formatChange(currentPeriod.TotalIncome, prevPeriod.TotalIncome),
			currentPeriod.TotalExpenses, formatChange(currentPeriod.TotalExpenses, prevPeriod.TotalExpenses),
			currentPeriod.Balance, formatChange(currentPeriod.Balance, prevPeriod.Balance),
			currentPeriod.AvgDailyIncome, formatChange(currentPeriod.AvgDailyIncome, prevPeriod.AvgDailyIncome),
			currentPeriod.AvgDailyExpense, formatChange(currentPeriod.AvgDailyExpense, prevPeriod.AvgDailyExpense),
			savingsRate*100, formatChange(savingsRate*100, prevSavingsRate*100),
		),
		CategoryData: CategoryData{
			Expenses: formatCategoryStats(currentPeriod.ExpensesByCategory, prevPeriod.ExpensesByCategory),
			Income:   formatCategoryStats(currentPeriod.IncomeByCategory, prevPeriod.IncomeByCategory),
		},
		Trends: Trends{
			ExpenseTrend: expenseTrend,
			IncomeTrend:  incomeTrend,
			PeriodComparison: PeriodComparison{
				PrevPeriod:    prevPeriod,
				CurrentPeriod: currentPeriod,
			},
		},
	}

	return report, nil
}

func (s *ExpenseTracker) CreateDefaultCategories(ctx context.Context, userID int64) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	existingCategories, err := s.repo.GetCategories(ctx, userID)
	if err != nil {
		return fmt.Errorf("error getting existing categories: %w", err)
	}

	if len(existingCategories) > 0 {
		// –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
		return nil
	}

	now := time.Now()
	defaultCategories := []model.Category{
		{
			UserID:    userID,
			Name:      "–ü—Ä–æ–¥—É–∫—Ç—ã",
			Type:      "expense",
			CreatedAt: now,
		},
		{
			UserID:    userID,
			Name:      "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
			Type:      "expense",
			CreatedAt: now,
		},
		{
			UserID:    userID,
			Name:      "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
			Type:      "expense",
			CreatedAt: now,
		},
		{
			UserID:    userID,
			Name:      "–ó–∞—Ä–ø–ª–∞—Ç–∞",
			Type:      "income",
			CreatedAt: now,
		},
	}

	for _, category := range defaultCategories {
		if err := s.repo.CreateCategory(ctx, &category); err != nil {
			return fmt.Errorf("error creating category %s: %w", category.Name, err)
		}
	}

	return nil
}

func (s *ExpenseTracker) GetCategories(ctx context.Context, userID int64) ([]model.Category, error) {
	return s.repo.GetCategories(ctx, userID)
}

func (s *ExpenseTracker) CreateCategory(ctx context.Context, category *model.Category) error {
	category.CreatedAt = time.Now()
	return s.repo.CreateCategory(ctx, category)
}

func (s *ExpenseTracker) DeleteCategory(ctx context.Context, categoryID string, userID int64) error {
	return s.repo.DeleteCategory(ctx, categoryID, userID)
}

func (s *ExpenseTracker) GetRecentTransactions(ctx context.Context, userID int64, limit int) ([]model.Transaction, error) {
	filter := model.TransactionFilter{
		Limit: limit,
	}
	return s.repo.GetTransactions(ctx, userID, filter)
}

func (s *ExpenseTracker) DeleteTransaction(ctx context.Context, transactionID string, userID int64) error {
	return s.repo.DeleteTransaction(ctx, transactionID, userID)
}

// BaseReport –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
type BaseReport struct {
	Period          string
	Text            string
	StartDate       time.Time
	EndDate         time.Time
	TotalIncome     float64
	TotalExpenses   float64
	Balance         float64
	TransactionData struct {
		TotalCount      int
		IncomeCount     int
		ExpenseCount    int
		AvgIncome       float64
		AvgExpense      float64
		DailyAvgIncome  float64
		DailyAvgExpense float64
		MaxIncome       model.TransactionInfo
		MaxExpense      model.TransactionInfo
	}
	CategoryData struct {
		Expenses []model.CategoryStats
		Income   []model.CategoryStats
		Changes  model.CategoryChanges
	}
	Trends struct {
		ExpenseTrend     []TrendPoint
		IncomeTrend      []TrendPoint
		PeriodComparison PeriodComparison
	}
}

// CategoryData —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
type CategoryData struct {
	Expenses []model.CategoryStats
	Income   []model.CategoryStats
	Changes  model.CategoryChanges
}

// CategoryStat –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
type CategoryStat struct {
	Name   string
	Amount float64
	Share  string
}

// Trends —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–¥–∞—Ö
type Trends struct {
	ExpenseTrend     []TrendPoint
	IncomeTrend      []TrendPoint
	PeriodComparison PeriodComparison
}

// TrendPoint –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—á–∫—É –≤ —Ç—Ä–µ–Ω–¥–µ
type TrendPoint struct {
	Date   time.Time
	Amount float64
	Change float64
}

// PeriodComparison —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
type PeriodComparison struct {
	PrevPeriod    PeriodStats
	CurrentPeriod PeriodStats
	ExpenseChange float64
	IncomeChange  float64
	BalanceChange float64
}

// PeriodStats —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
type PeriodStats struct {
	TotalIncome        float64
	TotalExpenses      float64
	Balance            float64
	AvgDailyIncome     float64
	AvgDailyExpense    float64
	DailyAvgIncome     float64
	DailyAvgExpense    float64
	ExpensesByCategory map[string]float64
	IncomeByCategory   map[string]float64
}

// calculateTrendPercent –≤—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
func calculateTrendPercent(current, previous float64) float64 {
	if previous == 0 {
		if current > 0 {
			return 100 // –†–æ—Å—Ç —Å –Ω—É–ª—è
		}
		return 0 // –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–ª–µ–≤—ã–µ
	}

	// –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞–∫–∏ –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
	if (current < 0 && previous > 0) || (current > 0 && previous < 0) {
		return -100 // –ü–æ–ª–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
	}

	// –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
	if math.Abs(current) < math.Abs(previous) {
		decrease := ((math.Abs(previous) - math.Abs(current)) / math.Abs(current)) * 100
		return -decrease // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
	}

	// –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
	increase := ((math.Abs(current) - math.Abs(previous)) / math.Abs(previous)) * 100
	return increase
}

// formatChange —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
func formatChange(current, previous float64) string {
	if previous == 0 {
		return ""
	}

	change := calculateTrendPercent(current, previous)

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
	if change < -1000 {
		change = -1000
	} else if change > 1000 {
		change = 1000
	}

	if change > 0 {
		return fmt.Sprintf(" (+%.1f%%‚¨ÜÔ∏è)", change)
	}
	return fmt.Sprintf(" (%.1f%%‚¨áÔ∏è)", change)
}

// formatCategoryStats —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
func formatCategoryStats(current, previous map[string]float64) []model.CategoryStats {
	stats := make([]model.CategoryStats, 0)
	total := 0.0
	for _, amount := range current {
		total += amount
	}

	for name, amount := range current {
		prevAmount := previous[name]
		share := (amount / total) * 100
		stats = append(stats, model.CategoryStats{
			Name:         name,
			Amount:       amount,
			Share:        share,
			TrendPercent: calculateTrendPercent(amount, prevAmount),
		})
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã
	sort.Slice(stats, func(i, j int) bool {
		return stats[i].Amount > stats[j].Amount
	})
	return stats
}

// analyzePeriod –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
func analyzePeriod(transactions []model.Transaction, start, end time.Time, categoryNames map[string]string) PeriodStats {
	stats := PeriodStats{
		ExpensesByCategory: make(map[string]float64),
		IncomeByCategory:   make(map[string]float64),
	}

	days := end.Sub(start).Hours() / 24

	for _, t := range transactions {
		categoryName := categoryNames[t.CategoryID]
		if t.Amount > 0 {
			stats.TotalIncome += t.Amount
			stats.IncomeByCategory[categoryName] += t.Amount
		} else {
			stats.TotalExpenses += -t.Amount
			stats.ExpensesByCategory[categoryName] += -t.Amount
		}
	}

	stats.Balance = stats.TotalIncome - stats.TotalExpenses
	stats.AvgDailyIncome = stats.TotalIncome / days
	stats.AvgDailyExpense = stats.TotalExpenses / days
	stats.DailyAvgIncome = stats.TotalIncome / days
	stats.DailyAvgExpense = stats.TotalExpenses / days

	return stats
}

// calculateTrends –≤—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
func (s *ExpenseTracker) calculateTrends(transactions []model.Transaction) ([]TrendPoint, []TrendPoint) {
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
	sort.Slice(transactions, func(i, j int) bool {
		return transactions[i].Date.Before(transactions[j].Date)
	})

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º
	dailyExpenses := make(map[time.Time]float64)
	dailyIncome := make(map[time.Time]float64)

	for _, t := range transactions {
		date := time.Date(t.Date.Year(), t.Date.Month(), t.Date.Day(), 0, 0, 0, 0, time.UTC)
		if t.Amount > 0 {
			dailyIncome[date] += t.Amount
		} else {
			dailyExpenses[date] += -t.Amount
		}
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤
	expenseTrend := make([]TrendPoint, 0)
	incomeTrend := make([]TrendPoint, 0)

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã
	dates := make([]time.Time, 0)
	for date := range dailyExpenses {
		dates = append(dates, date)
	}
	for date := range dailyIncome {
		if _, exists := dailyExpenses[date]; !exists {
			dates = append(dates, date)
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
	sort.Slice(dates, func(i, j int) bool {
		return dates[i].Before(dates[j])
	})

	// –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	var prevExpense, prevIncome float64
	for _, date := range dates {
		expense := dailyExpenses[date]
		income := dailyIncome[date]

		expenseTrend = append(expenseTrend, TrendPoint{
			Date:   date,
			Amount: expense,
			Change: expense - prevExpense,
		})
		incomeTrend = append(incomeTrend, TrendPoint{
			Date:   date,
			Amount: income,
			Change: income - prevIncome,
		})

		prevExpense = expense
		prevIncome = income
	}

	return expenseTrend, incomeTrend
}

func (s *ExpenseTracker) GetReport(ctx context.Context, userID int64, reportType ReportType) (*BaseReport, error) {
	now := time.Now()
	var startDate, endDate time.Time

	switch reportType {
	case DailyReport:
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –¥–Ω—è (00:00:00) –∏ –∫–æ–Ω–µ—Ü –¥–Ω—è (23:59:59)
		startDate = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
		endDate = time.Date(now.Year(), now.Month(), now.Day(), 23, 59, 59, 999999999, now.Location())
	case WeeklyReport:
		// –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
		startDate = time.Date(now.Year(), now.Month(), now.Day()-7, 0, 0, 0, 0, now.Location())
		endDate = time.Date(now.Year(), now.Month(), now.Day(), 23, 59, 59, 999999999, now.Location())
	case MonthlyReport:
		// –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
		startDate = time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, now.Location())
		// –ö–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
		endDate = time.Date(now.Year(), now.Month()+1, 0, 23, 59, 59, 999999999, now.Location())
	case YearlyReport:
		// –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
		startDate = time.Date(now.Year(), 1, 1, 0, 0, 0, 0, now.Location())
		// –ö–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
		endDate = time.Date(now.Year(), 12, 31, 23, 59, 59, 999999999, now.Location())
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
	currentFilter := model.TransactionFilter{
		StartDate: &startDate,
		EndDate:   &endDate,
	}
	currentTransactions, err := s.repo.GetTransactions(ctx, userID, currentFilter)
	if err != nil {
		return nil, fmt.Errorf("failed to get current period transactions: %w", err)
	}
	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: %d", len(currentTransactions))

	// –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ —Ç–∞–∫–æ–π –∂–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	var prevStartDate, prevEndDate time.Time
	periodDuration := endDate.Sub(startDate)
	prevEndDate = startDate.Add(-time.Nanosecond)
	prevStartDate = prevEndDate.Add(-periodDuration).Add(time.Nanosecond)

	prevFilter := model.TransactionFilter{
		StartDate: &prevStartDate,
		EndDate:   &prevEndDate,
	}
	prevTransactions, err := s.repo.GetTransactions(ctx, userID, prevFilter)
	if err != nil {
		return nil, fmt.Errorf("failed to get previous period transactions: %w", err)
	}
	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥: %d", len(prevTransactions))

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	categories, err := s.repo.GetCategories(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get categories: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
	report := &BaseReport{
		Period:    s.formatPeriod(reportType, startDate, endDate),
		StartDate: startDate,
		EndDate:   endDate,
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
	s.fillTransactionStats(report, currentTransactions, categories)
	s.fillCategoryAnalytics(report, currentTransactions, prevTransactions, categories)
	s.fillTrendAnalytics(report, currentTransactions, prevTransactions, categories)

	return report, nil
}

func (s *ExpenseTracker) fillTransactionStats(report *BaseReport, transactions []model.Transaction, categories []model.Category) {
	log.Printf("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: %d, –ø–µ—Ä–∏–æ–¥: %s - %s",
		len(transactions), report.StartDate.Format("2006-01-02"), report.EndDate.Format("2006-01-02"))

	stats := &report.TransactionData
	categoryNames := make(map[string]string)
	for _, cat := range categories {
		categoryNames[cat.ID] = cat.Name
	}

	var totalIncome, totalExpense float64
	var incomeCount, expenseCount int

	// –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
	for _, t := range transactions {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–Ω–µ –ø–µ—Ä–∏–æ–¥–∞
		if t.Date.Before(report.StartDate) || t.Date.After(report.EndDate) {
			continue
		}

		log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ID=%s, –°—É–º–º–∞=%.2f, –î–∞—Ç–∞=%s, –ö–∞—Ç–µ–≥–æ—Ä–∏—è=%s, –û–ø–∏—Å–∞–Ω–∏–µ=%s",
			t.ID, t.Amount, t.Date.Format("2006-01-02"), categoryNames[t.CategoryID], t.Description)

		if t.Amount > 0 {
			totalIncome += t.Amount
			incomeCount++
			if t.Amount > stats.MaxIncome.Amount {
				stats.MaxIncome = model.TransactionInfo{
					Amount:      t.Amount,
					CategoryID:  t.CategoryID,
					Date:        t.Date,
					Description: t.Description,
				}
			}
		} else {
			expense := -t.Amount
			totalExpense += expense
			expenseCount++
			if expense > stats.MaxExpense.Amount {
				stats.MaxExpense = model.TransactionInfo{
					Amount:      expense,
					CategoryID:  t.CategoryID,
					Date:        t.Date,
					Description: t.Description,
				}
			}
		}
	}

	stats.TotalCount = incomeCount + expenseCount
	stats.IncomeCount = incomeCount
	stats.ExpenseCount = expenseCount
	report.TotalIncome = totalIncome
	report.TotalExpenses = totalExpense
	report.Balance = totalIncome - totalExpense

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
	days := float64(report.EndDate.Sub(report.StartDate).Hours()/24) + 1 // +1 —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
	if days < 1 {
		days = 1
	}

	stats.DailyAvgIncome = totalIncome / days
	stats.DailyAvgExpense = totalExpense / days

	if incomeCount > 0 {
		stats.AvgIncome = totalIncome / float64(incomeCount)
	}
	if expenseCount > 0 {
		stats.AvgExpense = totalExpense / float64(expenseCount)
	}

	log.Printf("–ò—Ç–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ %d –¥–Ω–µ–π:", int(days))
	log.Printf("–î–æ—Ö–æ–¥—ã=%.2f (—Å—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å=%.2f), –ö–æ–ª-–≤–æ=%d, –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥=%.2f",
		totalIncome, stats.DailyAvgIncome, incomeCount, stats.AvgIncome)
	log.Printf("–†–∞—Å—Ö–æ–¥—ã=%.2f (—Å—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å=%.2f), –ö–æ–ª-–≤–æ=%d, –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥=%.2f",
		totalExpense, stats.DailyAvgExpense, expenseCount, stats.AvgExpense)
	log.Printf("–ë–∞–ª–∞–Ω—Å=%.2f", report.Balance)
}

func (s *ExpenseTracker) fillCategoryAnalytics(report *BaseReport, currentTransactions, prevTransactions []model.Transaction, categories []model.Category) {
	log.Printf("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –¢–µ–∫—É—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: %d, –ü—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: %d",
		len(currentTransactions), len(prevTransactions))

	// –°–æ–∑–¥–∞–µ–º –º–∞–ø—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	categoryStats := make(map[string]*model.CategoryStats)
	prevCategoryAmounts := make(map[string]float64)
	categoryTypes := make(map[string]string)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
	for _, cat := range categories {
		categoryTypes[cat.ID] = cat.Type
		categoryStats[cat.ID] = &model.CategoryStats{
			CategoryID: cat.ID,
			Name:       cat.Name,
			Amount:     0,
			Count:      0,
		}
	}

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
	for _, t := range currentTransactions {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—Ö–æ–¥–∏—Ç –≤ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
		if t.Date.Before(report.StartDate) || t.Date.After(report.EndDate) {
			// log.Printf("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤–Ω–µ –ø–µ—Ä–∏–æ–¥–∞: %s (—Å—É–º–º–∞: %.2f)", t.Date.Format("2006-01-02"), t.Amount)
			continue
		}

		if stats, ok := categoryStats[t.CategoryID]; ok {
			stats.Amount += t.Amount // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤)
			stats.Count++
			log.Printf("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é %s: %.2f (–≤—Å–µ–≥–æ: %.2f)", stats.Name, t.Amount, stats.Amount)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	periodDuration := report.EndDate.Sub(report.StartDate)
	prevPeriodEnd := report.StartDate.Add(-time.Nanosecond)
	prevPeriodStart := prevPeriodEnd.Add(-periodDuration).Add(time.Nanosecond)

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
	for _, t := range prevTransactions {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—Ö–æ–¥–∏—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
		if t.Date.Before(prevPeriodStart) || t.Date.After(prevPeriodEnd) {
			continue
		}

		if _, ok := categoryStats[t.CategoryID]; ok {
			prevCategoryAmounts[t.CategoryID] += t.Amount
		}
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	var totalIncome, totalExpense float64
	for _, stats := range categoryStats {
		if stats.Count > 0 {
			stats.AvgAmount = stats.Amount / float64(stats.Count)

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã
			if categoryTypes[stats.CategoryID] == "income" {
				totalIncome += stats.Amount
			} else {
				totalExpense += math.Abs(stats.Amount)
			}
			log.Printf("–ö–∞—Ç–µ–≥–æ—Ä–∏—è %s: —Å—É–º–º–∞=%.2f, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ=%d, —Å—Ä–µ–¥–Ω—è—è=%.2f",
				stats.Name, stats.Amount, stats.Count, stats.AvgAmount)
		}
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ª–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏
	for _, stats := range categoryStats {
		if stats.Count == 0 {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
		}

		// –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥
		prevAmount := prevCategoryAmounts[stats.CategoryID]
		if prevAmount != 0 {
			stats.TrendPercent = calculateTrendPercent(stats.Amount, prevAmount)
		}

		if categoryTypes[stats.CategoryID] == "income" {
			if totalIncome > 0 {
				stats.Share = (stats.Amount / totalIncome) * 100
			}
			report.CategoryData.Income = append(report.CategoryData.Income, *stats)
			log.Printf("–î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Ö–æ–¥ %s: —Å—É–º–º–∞=%.2f, –¥–æ–ª—è=%.2f%%", stats.Name, stats.Amount, stats.Share)
		} else {
			if totalExpense > 0 {
				stats.Share = (math.Abs(stats.Amount) / totalExpense) * 100
			}
			report.CategoryData.Expenses = append(report.CategoryData.Expenses, *stats)
			log.Printf("–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥ %s: —Å—É–º–º–∞=%.2f, –¥–æ–ª—è=%.2f%%", stats.Name, stats.Amount, stats.Share)
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —Å—É–º–º—ã
	sort.Slice(report.CategoryData.Income, func(i, j int) bool {
		return report.CategoryData.Income[i].Amount > report.CategoryData.Income[j].Amount
	})
	sort.Slice(report.CategoryData.Expenses, func(i, j int) bool {
		return math.Abs(report.CategoryData.Expenses[i].Amount) > math.Abs(report.CategoryData.Expenses[j].Amount)
	})

	// –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –∏–º–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è findCategoryChanges
	categoryNames := make(map[string]string)
	for _, cat := range categories {
		categoryNames[cat.ID] = cat.Name
	}

	// –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
	s.findCategoryChanges(&report.CategoryData.Changes, categoryStats, prevCategoryAmounts, categoryNames)

	log.Printf("–ò—Ç–æ–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: –î–æ—Ö–æ–¥—ã=%d –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –†–∞—Å—Ö–æ–¥—ã=%d –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
		len(report.CategoryData.Income), len(report.CategoryData.Expenses))
}

func (s *ExpenseTracker) fillTrendAnalytics(report *BaseReport, currentTransactions, prevTransactions []model.Transaction, categories []model.Category) {
	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º
	currentDaily := s.groupTransactionsByDay(currentTransactions)

	// –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
	report.Trends.ExpenseTrend = make([]TrendPoint, 0)
	report.Trends.IncomeTrend = make([]TrendPoint, 0)

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
	var totalIncome, totalExpense float64
	var daysWithIncome, daysWithExpense int
	for _, stats := range currentDaily {
		if stats.income > 0 {
			totalIncome += stats.income
			daysWithIncome++
		}
		if stats.expense > 0 {
			totalExpense += stats.expense
			daysWithExpense++
		}
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
	avgDailyIncome := 0.0
	if daysWithIncome > 0 {
		avgDailyIncome = totalIncome / float64(daysWithIncome)
	}

	avgDailyExpense := 0.0
	if daysWithExpense > 0 {
		avgDailyExpense = totalExpense / float64(daysWithExpense)
	}

	log.Printf("–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: –¥–æ—Ö–æ–¥=%.2f (%d –¥–Ω–µ–π), —Ä–∞—Å—Ö–æ–¥=%.2f (%d –¥–Ω–µ–π)",
		avgDailyIncome, daysWithIncome, avgDailyExpense, daysWithExpense)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç—Ä–µ–Ω–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	for date := report.StartDate; !date.After(report.EndDate); date = date.AddDate(0, 0, 1) {
		dayKey := date.Format("2006-01-02")
		dayStats := currentDaily[dayKey]

		// –¢—Ä–µ–Ω–¥ –¥–æ—Ö–æ–¥–æ–≤: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		incomeChange := calculateTrendPercent(dayStats.income, avgDailyIncome)
		incomeTrend := TrendPoint{
			Date:   date,
			Amount: dayStats.income,
			Change: incomeChange,
		}
		report.Trends.IncomeTrend = append(report.Trends.IncomeTrend, incomeTrend)

		// –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		expenseChange := calculateTrendPercent(dayStats.expense, avgDailyExpense)
		expenseTrend := TrendPoint{
			Date:   date,
			Amount: -dayStats.expense, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
			Change: expenseChange,
		}
		report.Trends.ExpenseTrend = append(report.Trends.ExpenseTrend, expenseTrend)

		// log.Printf("–¢—Ä–µ–Ω–¥—ã –∑–∞ %s: –¥–æ—Ö–æ–¥=%.2f (%.1f%%), —Ä–∞—Å—Ö–æ–¥=%.2f (%.1f%%)",
		// 	dayKey, dayStats.income, incomeChange, -dayStats.expense, expenseChange)
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
	var currentPeriod, prevPeriod PeriodStats
	days := float64(report.EndDate.Sub(report.StartDate).Hours() / 24)
	if days < 1 {
		days = 1
	}

	// –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
	for _, t := range currentTransactions {
		if t.Date.Before(report.StartDate) || t.Date.After(report.EndDate) {
			continue
		}
		if t.Amount > 0 {
			currentPeriod.TotalIncome += t.Amount
		} else {
			currentPeriod.TotalExpenses += -t.Amount
		}
	}
	currentPeriod.Balance = currentPeriod.TotalIncome - currentPeriod.TotalExpenses
	currentPeriod.DailyAvgIncome = currentPeriod.TotalIncome / days
	currentPeriod.DailyAvgExpense = currentPeriod.TotalExpenses / days

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	periodDuration := report.EndDate.Sub(report.StartDate)
	prevPeriodEnd := report.StartDate.Add(-time.Nanosecond)
	prevPeriodStart := prevPeriodEnd.Add(-periodDuration).Add(time.Nanosecond)

	// –°—á–∏—Ç–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
	for _, t := range prevTransactions {
		if t.Date.Before(prevPeriodStart) || t.Date.After(prevPeriodEnd) {
			continue
		}
		if t.Amount > 0 {
			prevPeriod.TotalIncome += t.Amount
		} else {
			prevPeriod.TotalExpenses += -t.Amount
		}
	}
	prevPeriod.Balance = prevPeriod.TotalIncome - prevPeriod.TotalExpenses
	prevPeriod.DailyAvgIncome = prevPeriod.TotalIncome / days
	prevPeriod.DailyAvgExpense = prevPeriod.TotalExpenses / days

	// –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [-100%, +200%]
	if prevPeriod.TotalExpenses > 0 {
		expenseChange := calculateTrendPercent(currentPeriod.TotalExpenses, prevPeriod.TotalExpenses)
		report.Trends.PeriodComparison.ExpenseChange = math.Max(math.Min(expenseChange, 200), -100)
	}
	if prevPeriod.TotalIncome > 0 {
		incomeChange := calculateTrendPercent(currentPeriod.TotalIncome, prevPeriod.TotalIncome)
		report.Trends.PeriodComparison.IncomeChange = math.Max(math.Min(incomeChange, 200), -100)
	}
	if prevPeriod.Balance != 0 {
		balanceChange := calculateTrendPercent(currentPeriod.Balance, prevPeriod.Balance)
		report.Trends.PeriodComparison.BalanceChange = math.Max(math.Min(balanceChange, 200), -100)
	}

	report.Trends.PeriodComparison.CurrentPeriod = currentPeriod
	report.Trends.PeriodComparison.PrevPeriod = prevPeriod

	log.Printf("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤: –¢–µ–∫—É—â–∏–π (–î–æ—Ö–æ–¥—ã=%.2f, –†–∞—Å—Ö–æ–¥—ã=%.2f, –ë–∞–ª–∞–Ω—Å=%.2f), –ü—Ä–µ–¥—ã–¥—É—â–∏–π (–î–æ—Ö–æ–¥—ã=%.2f, –†–∞—Å—Ö–æ–¥—ã=%.2f, –ë–∞–ª–∞–Ω—Å=%.2f)",
		currentPeriod.TotalIncome, currentPeriod.TotalExpenses, currentPeriod.Balance,
		prevPeriod.TotalIncome, prevPeriod.TotalExpenses, prevPeriod.Balance)
	log.Printf("–ò–∑–º–µ–Ω–µ–Ω–∏—è: –î–æ—Ö–æ–¥—ã=%.1f%%, –†–∞—Å—Ö–æ–¥—ã=%.1f%%, –ë–∞–ª–∞–Ω—Å=%.1f%%",
		report.Trends.PeriodComparison.IncomeChange,
		report.Trends.PeriodComparison.ExpenseChange,
		report.Trends.PeriodComparison.BalanceChange)
}

type dailyStats struct {
	income  float64
	expense float64
}

func (s *ExpenseTracker) groupTransactionsByDay(transactions []model.Transaction) map[string]dailyStats {
	daily := make(map[string]dailyStats)
	for _, t := range transactions {
		day := t.Date.Format("2006-01-02")
		stats := daily[day]
		if t.Amount > 0 {
			stats.income += t.Amount
		} else {
			stats.expense += -t.Amount
		}
		daily[day] = stats
	}
	return daily
}

func (s *ExpenseTracker) findCategoryChanges(changes *model.CategoryChanges, currentStats map[string]*model.CategoryStats, prevAmounts map[string]float64, categoryNames map[string]string) {
	var maxGrowthExpense, maxGrowthIncome, maxDropExpense, maxDropIncome model.CategoryChange

	for catID, stats := range currentStats {
		prevAmount := prevAmounts[catID]
		change := stats.Amount - prevAmount
		if prevAmount != 0 {
			changePercent := calculateTrendPercent(change, prevAmount)

			categoryChange := model.CategoryChange{
				CategoryID:    catID,
				Name:          categoryNames[catID],
				ChangeValue:   change,
				ChangePercent: changePercent,
			}

			if stats.Amount >= 0 { // –î–æ—Ö–æ–¥—ã
				if changePercent > maxGrowthIncome.ChangePercent {
					maxGrowthIncome = categoryChange
				} else if changePercent < maxDropIncome.ChangePercent {
					maxDropIncome = categoryChange
				}
			} else { // –†–∞—Å—Ö–æ–¥—ã
				if changePercent > maxGrowthExpense.ChangePercent {
					maxGrowthExpense = categoryChange
				} else if changePercent < maxDropExpense.ChangePercent {
					maxDropExpense = categoryChange
				}
			}
		}
	}

	changes.FastestGrowingExpense = maxGrowthExpense
	changes.FastestGrowingIncome = maxGrowthIncome
	changes.LargestDropExpense = maxDropExpense
	changes.LargestDropIncome = maxDropIncome
}

func (s *ExpenseTracker) formatPeriod(reportType ReportType, start, end time.Time) string {
	switch reportType {
	case DailyReport:
		return start.Format("02.01.2006")
	case WeeklyReport:
		return fmt.Sprintf("%s - %s",
			start.Format("02.01.2006"),
			end.Format("02.01.2006"))
	case MonthlyReport:
		return start.Format("January 2006")
	case YearlyReport:
		return start.Format("2006")
	default:
		return fmt.Sprintf("%s - %s",
			start.Format("02.01.2006"),
			end.Format("02.01.2006"))
	}
}
