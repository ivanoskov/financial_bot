package bot

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/ivanoskov/financial_bot/internal/model"
)

func (b *Bot) getMainKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", "action_add_income"),
			tgbotapi.NewInlineKeyboardButtonData("üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", "action_add_expense"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –û—Ç—á—ë—Ç—ã", "action_report"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "action_categories"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóë –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "action_transactions"),
		),
	)
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (—Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è)
func (b *Bot) getCategoriesKeyboard(categories []model.Category) tgbotapi.InlineKeyboardMarkup {
	var buttons [][]tgbotapi.InlineKeyboardButton
	
	for _, category := range categories {
		emoji := "üí∏"
		if category.Type == "income" {
			emoji = "üí∞"
		}
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				emoji + " " + category.Name,
				"category_" + category.ID,
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"üóë",
				"delete_category_" + category.ID,
			),
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ—Ö–æ–¥", "add_income_category"),
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –†–∞—Å—Ö–æ–¥", "add_expense_category"),
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("¬´ –ù–∞–∑–∞–¥", "action_back"),
	})
	
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è)
func (b *Bot) getSelectCategoryKeyboard(categories []model.Category) tgbotapi.InlineKeyboardMarkup {
	var buttons [][]tgbotapi.InlineKeyboardButton
	
	for _, category := range categories {
		emoji := "üí∏"
		if category.Type == "income" {
			emoji = "üí∞"
		}
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				emoji + " " + category.Name,
				"category_" + category.ID,
			),
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", "action_categories"),
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("¬´ –ù–∞–∑–∞–¥", "action_back"),
	})
	
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}