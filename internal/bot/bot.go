package bot

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"
	"strings"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/ivanoskov/financial_bot/internal/service"
	"github.com/ivanoskov/financial_bot/internal/model"
)

// UserState —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserState struct {
	SelectedCategoryID string
	TransactionType    string // "income" –∏–ª–∏ "expense"
	AwaitingAction    string // "new_category" –∏–ª–∏ –ø—É—Å—Ç–æ
}

type Bot struct {
	api     *tgbotapi.BotAPI
	service *service.ExpenseTracker
	states  map[int64]*UserState // —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö ID
}

func NewBot(token string, service *service.ExpenseTracker) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	return &Bot{
		api:     bot,
		service: service,
		states:  make(map[int64]*UserState),
	}, nil
}

func (b *Bot) handleUpdate(update tgbotapi.Update) error {
	if update.Message == nil && update.CallbackQuery == nil {
		return nil
	}

	if update.Message != nil && update.Message.IsCommand() {
		return b.handleCommand(update.Message)
	}

	if update.CallbackQuery != nil {
		return b.handleCallback(update.CallbackQuery)
	}

	if update.Message != nil {
		return b.handleMessage(update.Message)
	}

	return nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if err := b.handleUpdate(update); err != nil {
			// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
			fmt.Printf("Error handling update: %v\n", err)
		}
	}

	return nil
}

// HandleWebhook - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö webhook-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func (b *Bot) HandleWebhook(body []byte) error {
	var update tgbotapi.Update
	if err := json.Unmarshal(body, &update); err != nil {
		return err
	}

	return b.handleUpdate(update)
}

func (b *Bot) handleCommand(message *tgbotapi.Message) error {
	cmd := message.Command()
	
	switch cmd {
	case "start":
		b.handleStart(message)
	case "add":
		b.handleAddTransaction(message)
	case "report":
		b.handleReport(message)
	case "categories":
		b.handleCategories(message)
	}

	return nil
}

func (b *Bot) handleStart(message *tgbotapi.Message) {
	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
	err := b.service.CreateDefaultCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
		return
	}

	keyboard := b.getMainKeyboard()
	msg := tgbotapi.NewMessage(message.Chat.ID,
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤! üí∞\n\n" +
		"–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" +
		"‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã\n" +
		"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏\n" +
		"‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleAddTransaction(message *tgbotapi.Message) {
	categories, err := b.service.GetCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
	msg.ReplyMarkup = b.getCategoriesKeyboard(categories)
	b.api.Send(msg)
}

func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) error {
	var msg tgbotapi.MessageConfig

	switch {
	case callback.Data == "action_add_income":
		b.handleAddIncome(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "action_add_expense":
		b.handleAddExpense(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "action_report":
		b.handleReport(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "action_categories":
		b.handleCategories(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "add_income_category":
		b.handleAddIncomeCategory(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "add_expense_category":
		b.handleAddExpenseCategory(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "action_back":
		msg = tgbotapi.NewMessage(callback.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = b.getMainKeyboard()
		b.api.Send(msg)
	case strings.HasPrefix(callback.Data, "category_"):
		categoryID := strings.TrimPrefix(callback.Data, "category_")
		
		// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		categories, err := b.service.GetCategories(context.Background(), callback.From.ID)
		if err != nil {
			return fmt.Errorf("error getting categories: %w", err)
		}

		var transactionType string
		var categoryName string
		for _, cat := range categories {
			if cat.ID == categoryID {
				transactionType = cat.Type
				categoryName = cat.Name
				break
			}
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		b.states[callback.From.ID] = &UserState{
			SelectedCategoryID: categoryID,
			TransactionType:    transactionType,
		}
		
		msg = tgbotapi.NewMessage(callback.Message.Chat.ID, 
			fmt.Sprintf("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1000 –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", categoryName))
		b.api.Send(msg)
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å loading indicator
	callbackResponse := tgbotapi.NewCallback(callback.ID, "")
	b.api.Request(callbackResponse)

	return nil
}

func (b *Bot) handleMessage(message *tgbotapi.Message) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ –æ–∂–∏–¥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
	state, exists := b.states[message.From.ID]
	if !exists {
		// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = b.getMainKeyboard()
		b.api.Send(msg)
		return nil
	}

	// –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	if state.AwaitingAction == "new_category" {
		category := model.Category{
			UserID: message.From.ID,
			Name:   message.Text,
			Type:   state.TransactionType,
		}

		if err := b.service.CreateCategory(context.Background(), &category); err != nil {
			b.sendErrorMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %v", err))
			return nil
		}

		// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
		delete(b.states, message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–ö–∞—Ç–µ–≥–æ—Ä–∏—è '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ‚úÖ", category.Name))
		b.api.Send(msg)
		b.handleCategories(message)
		return nil
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	parts := strings.SplitN(message.Text, " ", 2)
	if len(parts) != 2 {
		b.sendErrorMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
		return nil
	}

	amount, err := strconv.ParseFloat(parts[0], 64)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000.50")
		return nil
	}

	// –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞—Å—Ö–æ–¥, –¥–µ–ª–∞–µ–º —Å—É–º–º—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
	if state.TransactionType == "expense" {
		amount = -amount
	}

	err = b.service.AddTransaction(context.Background(), 
		message.From.ID,
		state.SelectedCategoryID,
		amount,
		parts[1])

	if err != nil {
		b.sendErrorMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err))
		return nil
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	delete(b.states, message.From.ID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	msg := tgbotapi.NewMessage(message.Chat.ID, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! ‚úÖ")
	msg.ReplyMarkup = b.getMainKeyboard()
	b.api.Send(msg)

	return nil
}

func (b *Bot) handleReport(message *tgbotapi.Message) {
	report, err := b.service.GetMonthlyReport(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
	categories, err := b.service.GetCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–∞–ø—É ID -> Name –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
	categoryNames := make(map[string]string)
	for _, cat := range categories {
		categoryNames[cat.ID] = cat.Name
	}

	text := fmt.Sprintf(
		"üìä –û—Ç—á–µ—Ç %s\n\n"+
			"üí∞ –î–æ—Ö–æ–¥—ã: %.2f\n"+
			"üí∏ –†–∞—Å—Ö–æ–¥—ã: %.2f\n"+
			"üíµ –ë–∞–ª–∞–Ω—Å: %.2f\n\n"+
			"–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n",
		report.Period,
		report.TotalIncome,
		report.TotalExpenses,
		report.TotalIncome-report.TotalExpenses,
	)

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	for categoryID, amount := range report.ByCategory {
		categoryName := categoryNames[categoryID]
		emoji := "üí∏"
		if amount > 0 {
			emoji = "üí∞"
		}
		text += fmt.Sprintf("%s %s: %.2f\n", emoji, categoryName, amount)
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)
}

func (b *Bot) handleCategories(message *tgbotapi.Message) {
	categories, err := b.service.GetCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
		return
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É
	incomeCategories := make([]model.Category, 0)
	expenseCategories := make([]model.Category, 0)
	for _, cat := range categories {
		if cat.Type == "income" {
			incomeCategories = append(incomeCategories, cat)
		} else {
			expenseCategories = append(expenseCategories, cat)
		}
	}

	text := "üìã –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\nüí∞ –î–æ—Ö–æ–¥—ã:\n"
	for _, cat := range incomeCategories {
		text += fmt.Sprintf("‚Ä¢ %s\n", cat.Name)
	}

	text += "\nüí∏ –†–∞—Å—Ö–æ–¥—ã:\n"
	for _, cat := range expenseCategories {
		text += fmt.Sprintf("‚Ä¢ %s\n", cat.Name)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞", "add_income_category"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞", "add_expense_category"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "action_back"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
func (b *Bot) handleAddExpense(message *tgbotapi.Message) {
	categories, err := b.service.GetCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
		return
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
	expenseCategories := make([]model.Category, 0)
	for _, cat := range categories {
		if cat.Type == "expense" {
			expenseCategories = append(expenseCategories, cat)
		}
	}

	if len(expenseCategories) == 0 {
		b.sendErrorMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ /categories")
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:")
	msg.ReplyMarkup = b.getCategoriesKeyboard(expenseCategories)
	b.api.Send(msg)
}

func (b *Bot) handleAddIncome(message *tgbotapi.Message) {
	categories, err := b.service.GetCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
		return
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
	incomeCategories := make([]model.Category, 0)
	for _, cat := range categories {
		if cat.Type == "income" {
			incomeCategories = append(incomeCategories, cat)
		}
	}

	if len(incomeCategories) == 0 {
		b.sendErrorMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ /categories")
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:")
	msg.ReplyMarkup = b.getCategoriesKeyboard(incomeCategories)
	b.api.Send(msg)
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
func (b *Bot) handleAddIncomeCategory(message *tgbotapi.Message) {
	b.states[message.From.ID] = &UserState{
		TransactionType: "income",
		AwaitingAction: "new_category",
	}
	msg := tgbotapi.NewMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:")
	b.api.Send(msg)
}

func (b *Bot) handleAddExpenseCategory(message *tgbotapi.Message) {
	b.states[message.From.ID] = &UserState{
		TransactionType: "expense",
		AwaitingAction: "new_category",
	}
	msg := tgbotapi.NewMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:")
	b.api.Send(msg)
}

func (b *Bot) sendErrorMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, "‚ùå "+text)
	b.api.Send(msg)
} 