package bot

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/ivanoskov/financial_bot/internal/charts"
	"github.com/ivanoskov/financial_bot/internal/model"
	"github.com/ivanoskov/financial_bot/internal/service"
)

// UserState —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserState struct {
	SelectedCategoryID string
	TransactionType    string // "income" –∏–ª–∏ "expense"
	AwaitingAction     string // "new_category" –∏–ª–∏ –ø—É—Å—Ç–æ
}

type Bot struct {
	api      *tgbotapi.BotAPI
	service  *service.ExpenseTracker
	chartGen *charts.ChartGenerator
}

func NewBot(token string, service *service.ExpenseTracker) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	return &Bot{
		api:      bot,
		service:  service,
		chartGen: charts.NewChartGenerator(),
	}, nil
}

// getUserState –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
func (b *Bot) getUserState(ctx context.Context, userID int64) (*model.UserState, error) {
	return b.service.GetUserState(ctx, userID)
}

// saveUserState —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
func (b *Bot) saveUserState(ctx context.Context, state *model.UserState) error {
	return b.service.SaveUserState(ctx, state)
}

// deleteUserState —É–¥–∞–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
func (b *Bot) deleteUserState(ctx context.Context, userID int64) error {
	return b.service.DeleteUserState(ctx, userID)
}

func (b *Bot) handleUpdate(update tgbotapi.Update) error {
	if update.Message == nil && update.CallbackQuery == nil {
		return nil
	}

	if update.Message != nil && update.Message.IsCommand() {
		return b.handleCommand(update.Message)
	}

	if update.CallbackQuery != nil {
		return b.handleCallback(update.CallbackQuery)
	}

	if update.Message != nil {
		return b.handleMessage(update.Message)
	}

	return nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if err := b.handleUpdate(update); err != nil {
			// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
			fmt.Printf("Error handling update: %v\n", err)
		}
	}

	return nil
}

// HandleWebhook - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö webhook-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func (b *Bot) HandleWebhook(body []byte) error {
	var update tgbotapi.Update
	if err := json.Unmarshal(body, &update); err != nil {
		return err
	}

	return b.handleUpdate(update)
}

func (b *Bot) handleCommand(message *tgbotapi.Message) error {
	cmd := message.Command()

	switch cmd {
	case "start":
		b.handleStart(message)
	case "add":
		b.handleAddTransaction(message)
	case "report":
		b.handleReport(message)
	case "categories":
		b.handleCategories(message)
	}

	return nil
}

func (b *Bot) handleStart(message *tgbotapi.Message) {
	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
	err := b.service.CreateDefaultCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %v", err))
		return
	}

	keyboard := b.getMainKeyboard()
	msg := tgbotapi.NewMessage(message.Chat.ID,
		"*–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤* üí∞\n\n"+
			"–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"+
			"‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã\n"+
			"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"+
			"‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n"+
			"*–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ* üëá")

	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleAddTransaction(message *tgbotapi.Message) {
	categories, err := b.service.GetCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
	msg.ReplyMarkup = b.getCategoriesKeyboard(categories)
	b.api.Send(msg)
}

func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) error {
	var msg tgbotapi.MessageConfig

	switch {
	case callback.Data == "action_add_income":
		b.handleAddIncome(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "action_add_expense":
		b.handleAddExpense(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "action_report":
		b.handleReport(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "action_categories":
		b.handleCategories(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "action_transactions":
		b.handleTransactions(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "add_income_category":
		b.handleAddIncomeCategory(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "add_expense_category":
		b.handleAddExpenseCategory(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case callback.Data == "action_back":
		msg = tgbotapi.NewMessage(callback.Message.Chat.ID, "*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = b.getMainKeyboard()
		b.api.Send(msg)
	case strings.HasPrefix(callback.Data, "delete_transaction_"):
		transactionID := strings.TrimPrefix(callback.Data, "delete_transaction_")
		err := b.service.DeleteTransaction(context.Background(), transactionID, callback.From.ID)
		if err != nil {
			return fmt.Errorf("error deleting transaction: %w", err)
		}
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
		b.handleTransactions(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case strings.HasPrefix(callback.Data, "delete_category_"):
		categoryID := strings.TrimPrefix(callback.Data, "delete_category_")
		err := b.service.DeleteCategory(context.Background(), categoryID, callback.From.ID)
		if err != nil {
			return fmt.Errorf("error deleting category: %w", err)
		}
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
		b.handleCategories(&tgbotapi.Message{
			From: callback.From,
			Chat: callback.Message.Chat,
		})
	case strings.HasPrefix(callback.Data, "category_"):
		categoryID := strings.TrimPrefix(callback.Data, "category_")

		// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		categories, err := b.service.GetCategories(context.Background(), callback.From.ID)
		if err != nil {
			return fmt.Errorf("error getting categories: %w", err)
		}

		var transactionType string
		var categoryName string
		for _, cat := range categories {
			if cat.ID == categoryID {
				transactionType = cat.Type
				categoryName = cat.Name
				break
			}
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
		state := &model.UserState{
			UserID:           callback.From.ID,
			SelectedCategory: categoryID,
			TransactionType:  transactionType,
		}
		if err := b.saveUserState(context.Background(), state); err != nil {
			return fmt.Errorf("error saving user state: %w", err)
		}

		msg = tgbotapi.NewMessage(callback.Message.Chat.ID,
			fmt.Sprintf("*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* %s\n\n"+
				"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"+
				"`1000 –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤`", categoryName))
		msg.ParseMode = "Markdown"
		b.api.Send(msg)
	case callback.Data == "report_daily":
		b.sendReport(callback.Message.Chat.ID, callback.From.ID, service.DailyReport)
	case callback.Data == "report_weekly":
		b.sendReport(callback.Message.Chat.ID, callback.From.ID, service.WeeklyReport)
	case callback.Data == "report_monthly":
		b.sendReport(callback.Message.Chat.ID, callback.From.ID, service.MonthlyReport)
	case callback.Data == "report_yearly":
		b.sendReport(callback.Message.Chat.ID, callback.From.ID, service.YearlyReport)
	case callback.Data == "report_charts":
		// –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
		report, err := b.service.GetReport(context.Background(), callback.From.ID, service.MonthlyReport)
		if err != nil {
			b.sendErrorMessage(callback.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
			return nil
		}
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "üìä –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...")
		b.api.Send(msg)
		err = b.sendCharts(context.Background(), callback.Message.Chat.ID, report)
		if err != nil {
			b.sendErrorMessage(callback.Message.Chat.ID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏: %v", err))
		}
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å loading indicator
	callbackResponse := tgbotapi.NewCallback(callback.ID, "")
	b.api.Request(callbackResponse)

	return nil
}

func (b *Bot) handleMessage(message *tgbotapi.Message) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
	state, err := b.getUserState(context.Background(), message.From.ID)
	if err != nil {
		return fmt.Errorf("error getting user state: %w", err)
	}

	fmt.Printf("Current user state: %+v\n", state)

	if state == nil {
		// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = b.getMainKeyboard()
		b.api.Send(msg)
		return nil
	}

	// –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	if state.AwaitingAction == "new_category" {
		fmt.Printf("Creating new category: %s, type: %s\n", message.Text, state.TransactionType)
		category := model.Category{
			UserID: message.From.ID,
			Name:   message.Text,
			Type:   state.TransactionType,
		}

		if err := b.service.CreateCategory(context.Background(), &category); err != nil {
			b.sendErrorMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %v", err))
			return nil
		}

		// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		if err := b.deleteUserState(context.Background(), message.From.ID); err != nil {
			return fmt.Errorf("error deleting user state: %w", err)
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–ö–∞—Ç–µ–≥–æ—Ä–∏—è '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ‚úÖ", category.Name))
		b.api.Send(msg)
		b.handleCategories(message)
		return nil
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	parts := strings.SplitN(message.Text, " ", 2)
	amount, err := strconv.ParseFloat(parts[0], 64)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000.50")
		return nil
	}

	// –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞—Å—Ö–æ–¥, –¥–µ–ª–∞–µ–º —Å—É–º–º—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
	if state.TransactionType == "expense" {
		amount = -amount
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
	description := ""
	if len(parts) > 1 {
		description = parts[1]
	}

	err = b.service.AddTransaction(context.Background(),
		message.From.ID,
		state.SelectedCategory,
		amount,
		description)

	if err != nil {
		b.sendErrorMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err))
		return nil
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	if err := b.deleteUserState(context.Background(), message.From.ID); err != nil {
		return fmt.Errorf("error deleting user state: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	msg := tgbotapi.NewMessage(message.Chat.ID, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! ‚úÖ")
	msg.ReplyMarkup = b.getMainKeyboard()
	b.api.Send(msg)

	return nil
}

func (b *Bot) handleReport(message *tgbotapi.Message) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –ó–∞ –¥–µ–Ω—å", "report_daily"),
			tgbotapi.NewInlineKeyboardButtonData("üìà –ó–∞ –Ω–µ–¥–µ–ª—é", "report_weekly"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ó–∞ –º–µ—Å—è—Ü", "report_monthly"),
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –ó–∞ –≥–æ–¥", "report_yearly"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –ì—Ä–∞—Ñ–∏–∫–∏", "report_charts"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("¬´ –ù–∞–∑–∞–¥", "action_back"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID,
		"*–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:*\n\n"+
			"‚Ä¢ –ó–∞ –¥–µ–Ω—å - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å\n"+
			"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é - –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"+
			"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n"+
			"‚Ä¢ –ó–∞ –≥–æ–¥ - –≥–æ–¥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç—Ä–µ–Ω–¥—ã\n"+
			"‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ - –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleCategories(message *tgbotapi.Message) {
	categories, err := b.service.GetCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
		return
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É
	incomeCategories := make([]model.Category, 0)
	expenseCategories := make([]model.Category, 0)
	for _, cat := range categories {
		if cat.Type == "income" {
			incomeCategories = append(incomeCategories, cat)
		} else {
			expenseCategories = append(expenseCategories, cat)
		}
	}

	text := "*–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n"
	if len(incomeCategories) > 0 {
		text += "üí∞ *–î–æ—Ö–æ–¥—ã:*\n"
		for _, cat := range incomeCategories {
			text += fmt.Sprintf("‚Ä¢ %s\n", cat.Name)
		}
	}

	if len(expenseCategories) > 0 {
		if len(incomeCategories) > 0 {
			text += "\n"
		}
		text += "üí∏ *–†–∞—Å—Ö–æ–¥—ã:*\n"
		for _, cat := range expenseCategories {
			text += fmt.Sprintf("‚Ä¢ %s\n", cat.Name)
		}
	}

	text += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ üóë –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = b.getCategoriesKeyboard(categories)
	b.api.Send(msg)
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
func (b *Bot) handleAddExpense(message *tgbotapi.Message) {
	categories, err := b.service.GetCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
		return
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
	expenseCategories := make([]model.Category, 0)
	for _, cat := range categories {
		if cat.Type == "expense" {
			expenseCategories = append(expenseCategories, cat)
		}
	}

	if len(expenseCategories) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID,
			"*–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤*\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = b.getCategoriesKeyboard(categories)
		b.api.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = b.getSelectCategoryKeyboard(expenseCategories)
	b.api.Send(msg)
}

func (b *Bot) handleAddIncome(message *tgbotapi.Message) {
	categories, err := b.service.GetCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
		return
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
	incomeCategories := make([]model.Category, 0)
	for _, cat := range categories {
		if cat.Type == "income" {
			incomeCategories = append(incomeCategories, cat)
		}
	}

	if len(incomeCategories) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID,
			"*–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤*\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = b.getCategoriesKeyboard(categories)
		b.api.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = b.getSelectCategoryKeyboard(incomeCategories)
	b.api.Send(msg)
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
func (b *Bot) handleAddIncomeCategory(message *tgbotapi.Message) {
	state := &model.UserState{
		UserID:          message.From.ID,
		TransactionType: "income",
		AwaitingAction:  "new_category",
	}
	if err := b.saveUserState(context.Background(), state); err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "*–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

func (b *Bot) handleAddExpenseCategory(message *tgbotapi.Message) {
	state := &model.UserState{
		UserID:          message.From.ID,
		TransactionType: "expense",
		AwaitingAction:  "new_category",
	}
	if err := b.saveUserState(context.Background(), state); err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "*–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

func (b *Bot) handleTransactions(message *tgbotapi.Message) {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
	transactions, err := b.service.GetRecentTransactions(context.Background(), message.From.ID, 10)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return
	}

	if len(transactions) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "*–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = b.getMainKeyboard()
		b.api.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
	categories, err := b.service.GetCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
		return
	}

	categoryNames := make(map[string]string)
	for _, cat := range categories {
		categoryNames[cat.ID] = cat.Name
	}

	text := "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è\n\n"
	var buttons [][]tgbotapi.InlineKeyboardButton

	for _, t := range transactions {
		categoryName := categoryNames[t.CategoryID]
		emoji := "üí∏"
		amountStr := fmt.Sprintf("%.2f‚ÇΩ", -t.Amount)
		if t.Amount > 0 {
			emoji = "üí∞"
			amountStr = fmt.Sprintf("%.2f‚ÇΩ", t.Amount)
		}

		text += fmt.Sprintf("%s *%s*: %s _%s_\n",
			emoji, categoryName, amountStr, t.Description)

		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("%s %s: %s", emoji, categoryName, amountStr),
				"delete_transaction_"+t.ID,
			),
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("¬´ –ù–∞–∑–∞–¥", "action_back"),
	})

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	b.api.Send(msg)
}

func (b *Bot) sendReport(chatID int64, userID int64, reportType service.ReportType) {
	report, err := b.service.GetReport(context.Background(), userID, reportType)
	if err != nil {
		b.sendErrorMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
	text := fmt.Sprintf("üìä *–û—Ç—á–µ—Ç –∑–∞ %s*\n\n", report.Period)

	// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
	text += "*–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
	text += fmt.Sprintf("üí∞ –î–æ—Ö–æ–¥—ã: *%.0f‚ÇΩ*", report.TotalIncome)
	if report.Trends.PeriodComparison.IncomeChange != 0 {
		if report.Trends.PeriodComparison.IncomeChange > 0 {
			text += fmt.Sprintf(" (+%.1f%%‚¨ÜÔ∏è)", report.Trends.PeriodComparison.IncomeChange)
		} else {
			text += fmt.Sprintf(" (%.1f%%‚¨áÔ∏è)", report.Trends.PeriodComparison.IncomeChange)
		}
	}
	text += "\n"

	text += fmt.Sprintf("üí∏ –†–∞—Å—Ö–æ–¥—ã: *%.0f‚ÇΩ*", report.TotalExpenses)
	if report.Trends.PeriodComparison.ExpenseChange != 0 {
		if report.Trends.PeriodComparison.ExpenseChange > 0 {
			text += fmt.Sprintf(" (+%.1f%%‚¨ÜÔ∏è)", report.Trends.PeriodComparison.ExpenseChange)
		} else {
			text += fmt.Sprintf(" (%.1f%%‚¨áÔ∏è)", report.Trends.PeriodComparison.ExpenseChange)
		}
	}
	text += "\n"

	text += fmt.Sprintf("üíµ –ë–∞–ª–∞–Ω—Å: *%.0f‚ÇΩ*", report.Balance)
	if report.Trends.PeriodComparison.BalanceChange != 0 {
		if report.Trends.PeriodComparison.BalanceChange > 0 {
			text += fmt.Sprintf(" (+%.1f%%‚¨ÜÔ∏è)", report.Trends.PeriodComparison.BalanceChange)
		} else {
			text += fmt.Sprintf(" (%.1f%%‚¨áÔ∏è)", report.Trends.PeriodComparison.BalanceChange)
		}
	}
	text += "\n\n"

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
	text += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:*\n"
	text += fmt.Sprintf("‚Ä¢ –í—Å–µ–≥–æ: *%.d* (üí∞ *%d*, üí∏ *%d*)\n",
		report.TransactionData.TotalCount,
		report.TransactionData.IncomeCount,
		report.TransactionData.ExpenseCount)
	text += fmt.Sprintf("‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: *%.0f‚ÇΩ*\n", report.TransactionData.AvgIncome)
	text += fmt.Sprintf("‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: *%.0f‚ÇΩ*\n", report.TransactionData.AvgExpense)
	text += fmt.Sprintf("‚Ä¢ –í –¥–µ–Ω—å (–¥–æ—Ö–æ–¥—ã): *%.0f‚ÇΩ*\n", report.TransactionData.DailyAvgIncome)
	text += fmt.Sprintf("‚Ä¢ –í –¥–µ–Ω—å (—Ä–∞—Å—Ö–æ–¥—ã): *%.0f‚ÇΩ*\n\n", report.TransactionData.DailyAvgExpense)

	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	text += "*–ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*\n"
	if report.TransactionData.MaxIncome.Amount > 0 {
		text += fmt.Sprintf("üí∞ +*%.0f‚ÇΩ*: %s\n",
			report.TransactionData.MaxIncome.Amount,
			report.TransactionData.MaxIncome.Description)
	}
	if report.TransactionData.MaxExpense.Amount > 0 {
		text += fmt.Sprintf("üí∏ -*%.0f‚ÇΩ*: %s\n\n",
			report.TransactionData.MaxExpense.Amount,
			report.TransactionData.MaxExpense.Description)
	}

	// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
	if len(report.CategoryData.Expenses) > 0 {
		text += "*–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n"
		for _, cat := range report.CategoryData.Expenses {
			text += fmt.Sprintf("‚Ä¢ *%s*: *%.0f‚ÇΩ* (%.1f%%)",
				cat.Name, cat.Amount, cat.Share)
			if cat.TrendPercent != 0 {
				if cat.TrendPercent > 0 {
					text += fmt.Sprintf(" (+%.1f%%‚¨ÜÔ∏è)", cat.TrendPercent)
				} else {
					text += fmt.Sprintf(" (%.1f%%‚¨áÔ∏è)", cat.TrendPercent)
				}
			}
			text += "\n"
		}
		text += "\n"
	}

	// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
	if len(report.CategoryData.Income) > 0 {
		text += "*–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤:*\n"
		for _, cat := range report.CategoryData.Income {
			text += fmt.Sprintf("‚Ä¢ *%s*: *%.0f‚ÇΩ* (%.1f%%)",
				cat.Name, cat.Amount, cat.Share)
			if cat.TrendPercent != 0 {
				if cat.TrendPercent > 0 {
					text += fmt.Sprintf(" (+%.1f%%‚¨ÜÔ∏è)", cat.TrendPercent)
				} else {
					text += fmt.Sprintf(" (%.1f%%‚¨áÔ∏è)", cat.TrendPercent)
				}
			}
			text += "\n"
		}
		text += "\n"
	}

	// –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
	text += "*–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:*\n"
	if report.CategoryData.Changes.FastestGrowingExpense.Name != "" {
		text += fmt.Sprintf("üìà *–ë—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ —Ä–∞—Å—Ç—É—Ç —Ä–∞—Å—Ö–æ–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '%s': %.1f%%*\n",
			report.CategoryData.Changes.FastestGrowingExpense.Name,
			report.CategoryData.Changes.FastestGrowingExpense.ChangePercent)
	}
	if report.CategoryData.Changes.LargestDropExpense.Name != "" {
		text += fmt.Sprintf("üìâ *–°–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ —Å–Ω–∏–∑–∏–ª–∏—Å—å —Ä–∞—Å—Ö–æ–¥—ã –≤ '%s': %.1f%%*\n",
			report.CategoryData.Changes.LargestDropExpense.Name,
			report.CategoryData.Changes.LargestDropExpense.ChangePercent)
	}
	if report.CategoryData.Changes.FastestGrowingIncome.Name != "" {
		text += fmt.Sprintf("üìà *–ë—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ —Ä–∞—Å—Ç—É—Ç –¥–æ—Ö–æ–¥—ã –≤ '%s': %.1f%%*\n",
			report.CategoryData.Changes.FastestGrowingIncome.Name,
			report.CategoryData.Changes.FastestGrowingIncome.ChangePercent)
	}
	if report.CategoryData.Changes.LargestDropIncome.Name != "" {
		text += fmt.Sprintf("üìâ *–°–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ —Å–Ω–∏–∑–∏–ª–∏—Å—å –¥–æ—Ö–æ–¥—ã –≤ '%s': %.1f%%*\n",
			report.CategoryData.Changes.LargestDropIncome.Name,
			report.CategoryData.Changes.LargestDropIncome.ChangePercent)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –ì—Ä–∞—Ñ–∏–∫–∏", "report_charts"),
			tgbotapi.NewInlineKeyboardButtonData("¬´ –í –º–µ–Ω—é", "action_back"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) sendCharts(ctx context.Context, chatID int64, report *service.BaseReport) error {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	msg := tgbotapi.NewMessage(chatID, "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
	b.api.Send(msg)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏
	log.Printf("Generating financial dashboard...")
	dashboardData, err := b.chartGen.GenerateFinancialDashboard(report)
	if err != nil {
		return fmt.Errorf("failed to generate financial dashboard: %w", err)
	}

	log.Printf("Generating expense categories analysis...")
	expenseCategoriesData, err := b.chartGen.GenerateCategoryPieChart(report, true)
	if err != nil {
		return fmt.Errorf("failed to generate expense categories chart: %w", err)
	}

	log.Printf("Generating income categories analysis...")
	incomeCategoriesData, err := b.chartGen.GenerateCategoryPieChart(report, false)
	if err != nil {
		return fmt.Errorf("failed to generate income categories chart: %w", err)
	}

	log.Printf("Generating trends chart...")
	trendsData, err := b.chartGen.GenerateTrendChart(report)
	if err != nil {
		return fmt.Errorf("failed to generate trends chart: %w", err)
	}

	log.Printf("Generating balance chart...")
	balanceData, err := b.chartGen.GenerateBalanceChart(report)
	if err != nil {
		return fmt.Errorf("failed to generate balance chart: %w", err)
	}

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
	var media []interface{}

	if len(dashboardData) > 0 {
		media = append(media, tgbotapi.NewInputMediaPhoto(tgbotapi.FileBytes{
			Name:  "1_dashboard.png",
			Bytes: dashboardData,
		}))
	}

	if len(expenseCategoriesData) > 0 {
		media = append(media, tgbotapi.NewInputMediaPhoto(tgbotapi.FileBytes{
			Name:  "2_expenses.png",
			Bytes: expenseCategoriesData,
		}))
	}

	if len(incomeCategoriesData) > 0 {
		media = append(media, tgbotapi.NewInputMediaPhoto(tgbotapi.FileBytes{
			Name:  "3_income.png",
			Bytes: incomeCategoriesData,
		}))
	}

	if len(trendsData) > 0 {
		media = append(media, tgbotapi.NewInputMediaPhoto(tgbotapi.FileBytes{
			Name:  "4_trends.png",
			Bytes: trendsData,
		}))
	}

	if len(balanceData) > 0 {
		media = append(media, tgbotapi.NewInputMediaPhoto(tgbotapi.FileBytes{
			Name:  "5_balance.png",
			Bytes: balanceData,
		}))
	}

	if len(media) == 0 {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
		b.api.Send(msg)
		return nil
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
	if mediaPhoto, ok := media[0].(*tgbotapi.InputMediaPhoto); ok {
		mediaPhoto.Caption = "üìä *–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑*\n\n" +
			"1. –î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n" +
			"2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n" +
			"3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n" +
			"4. –¢—Ä–µ–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π\n" +
			"5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤"
		mediaPhoto.ParseMode = "Markdown"
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
	mediaGroup := tgbotapi.NewMediaGroup(chatID, media)
	_, err = b.api.SendMediaGroup(mediaGroup)
	if err != nil {
		return fmt.Errorf("failed to send charts: %w", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –ö –æ—Ç—á–µ—Ç–∞–º", "action_report"),
			tgbotapi.NewInlineKeyboardButtonData("¬´ –í –º–µ–Ω—é", "action_back"),
		),
	)

	msg = tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)

	return nil
}

func (b *Bot) sendErrorMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, "‚ùå "+text)
	b.api.Send(msg)
}

// SendDailyReport –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) SendDailyReport(ctx context.Context, userID int64, report *service.BaseReport) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
	text := "*–í–∞—à–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å:*\n\n"

	// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
	text += "*–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
	text += fmt.Sprintf("üí∞ –î–æ—Ö–æ–¥—ã: %.2f‚ÇΩ", report.TotalIncome)
	if report.Trends.PeriodComparison.IncomeChange != 0 {
		if report.Trends.PeriodComparison.IncomeChange > 0 {
			text += fmt.Sprintf(" (+%.1f%%‚¨ÜÔ∏è)", report.Trends.PeriodComparison.IncomeChange)
		} else {
			text += fmt.Sprintf(" (%.1f%%‚¨áÔ∏è)", report.Trends.PeriodComparison.IncomeChange)
		}
	}
	text += "\n"

	text += fmt.Sprintf("üí∏ –†–∞—Å—Ö–æ–¥—ã: %.2f‚ÇΩ", report.TotalExpenses)
	if report.Trends.PeriodComparison.ExpenseChange != 0 {
		if report.Trends.PeriodComparison.ExpenseChange > 0 {
			text += fmt.Sprintf(" (+%.1f%%‚¨ÜÔ∏è)", report.Trends.PeriodComparison.ExpenseChange)
		} else {
			text += fmt.Sprintf(" (%.1f%%‚¨áÔ∏è)", report.Trends.PeriodComparison.ExpenseChange)
		}
	}
	text += "\n"

	text += fmt.Sprintf("üíµ –ë–∞–ª–∞–Ω—Å: %.2f‚ÇΩ", report.Balance)
	if report.Trends.PeriodComparison.BalanceChange != 0 {
		if report.Trends.PeriodComparison.BalanceChange > 0 {
			text += fmt.Sprintf(" (+%.1f%%‚¨ÜÔ∏è)", report.Trends.PeriodComparison.BalanceChange)
		} else {
			text += fmt.Sprintf(" (%.1f%%‚¨áÔ∏è)", report.Trends.PeriodComparison.BalanceChange)
		}
	}
	text += "\n\n"

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç", "report_daily"),
			tgbotapi.NewInlineKeyboardButtonData("üìà –ì—Ä–∞—Ñ–∏–∫–∏", "report_charts"),
		),
	)

	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	_, err := b.api.Send(msg)

	return err
}
