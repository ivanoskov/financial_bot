package bot

import (
	"context"
	"fmt"
	"strconv"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"strings"
)

func (b *Bot) handleUpdate(update tgbotapi.Update) {
	if update.Message == nil && update.CallbackQuery == nil {
		return
	}

	var chatID int64
	if update.Message != nil {
		chatID = update.Message.Chat.ID
	} else {
		chatID = update.CallbackQuery.Message.Chat.ID
	}

	if update.Message != nil && update.Message.IsCommand() {
		b.handleCommand(update.Message)
		return
	}

	if update.CallbackQuery != nil {
		b.handleCallback(update.CallbackQuery)
		return
	}

	if update.Message != nil {
		b.handleMessage(update.Message)
	}
}

func (b *Bot) handleCommand(message *tgbotapi.Message) {
	cmd := message.Command()
	
	switch cmd {
	case "start":
		b.handleStart(message)
	case "add":
		b.handleAddTransaction(message)
	case "report":
		b.handleReport(message)
	case "categories":
		b.handleCategories(message)
	}
}

func (b *Bot) handleStart(message *tgbotapi.Message) {
	keyboard := b.getMainKeyboard()
	msg := tgbotapi.NewMessage(message.Chat.ID,
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤! üí∞\n\n" +
		"–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" +
		"‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã\n" +
		"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏\n" +
		"‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleAddTransaction(message *tgbotapi.Message) {
	categories, err := b.service.GetCategories(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
	msg.ReplyMarkup = b.getCategoriesKeyboard(categories)
	b.api.Send(msg)
}

func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) {
	if strings.HasPrefix(callback.Data, "category_") {
		categoryID := strings.TrimPrefix(callback.Data, "category_")
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, 
			"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"+
			"1000 –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
		b.api.Send(msg)
	}
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	if message.Text == "üìä –û—Ç—á—ë—Ç—ã" {
		b.handleReport(message)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è
	parts := strings.SplitN(message.Text, " ", 2)
	if len(parts) != 2 {
		return
	}

	amount, err := strconv.ParseFloat(parts[0], 64)
	if err != nil {
		return
	}

	err = b.service.AddTransaction(context.Background(), 
		message.From.ID, 
		"category_id", // –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		amount,
		parts[1])

	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return
	}

	b.api.Send(tgbotapi.NewMessage(message.Chat.ID, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! ‚úÖ"))
}

func (b *Bot) handleReport(message *tgbotapi.Message) {
	report, err := b.service.GetMonthlyReport(context.Background(), message.From.ID)
	if err != nil {
		b.sendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
		return
	}

	text := fmt.Sprintf(
		"üìä –û—Ç—á–µ—Ç %s\n\n"+
			"üí∞ –î–æ—Ö–æ–¥—ã: %.2f\n"+
			"üí∏ –†–∞—Å—Ö–æ–¥—ã: %.2f\n"+
			"üíµ –ë–∞–ª–∞–Ω—Å: %.2f\n\n"+
			"–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n",
		report.Period,
		report.TotalIncome,
		report.TotalExpenses,
		report.TotalIncome-report.TotalExpenses,
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	b.api.Send(msg)
} 